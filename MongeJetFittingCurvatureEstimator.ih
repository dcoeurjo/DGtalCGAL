


template <typename TK, typename TS>
DGtal::MongeJetFittingCurvatureEstimator<TK,TS>::
MongeJetFittingCurvatureEstimator( ConstAlias< TK> space,
                                   ConstAlias< ShapeCellFunctor> aShape ):
                                   mySpace(space), myShape(aShape)
{
}
                                        
template <typename TK, typename TS>
bool
DGtal::MongeJetFittingCurvatureEstimator<TK,TS>::isValid() const
{
  return true;
}

template <typename TK, typename TS>
template <typename ConstIterator>
void
DGtal::MongeJetFittingCurvatureEstimator<TK,TS>::init(const double h, ConstIterator &itb, ConstIterator& ite)
{
  myH = h;

  typename SCellToMidPoint<KSpace>::Output p;
  SCellToMidPoint<KSpace>  midpoint(*mySpace);


  for(ConstIterator it = itb ; it != itb; ++it)
    {
       p = midpoint(it);
       myPointSet.push_back( CGALPoint(p[0],p[1],p[2]));
    }
    
  trace.info() << "PointSet size= "<< myPointSet.size() << std::endl;

}


